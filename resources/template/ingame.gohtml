{{define "content"}}
{{template "logged-header" .}}

<div class="main">
<div class="ingame" v-if="gamestate">
  <div class="game-grid">
    <div id="table-item">
      {{range $flash := .Flashes}}
        <p class="err-msg">{{$flash}}</p>
      {{end}}
      <p class="err-msg" v-for="flash in vueFlashes">${flash}</p>
      <h4>${tip}</h4>
      <div id="black-card" class="card black-card in-table">
        <p>${gamestate.blackCardInPlay.text}</p>
        <p class="card-expansion-text">${gamestate.blackCardInPlay.expansion}</p>
      </div>
      <div id="sinner-plays">
        <div v-for="(sinnerplay) in gamestate.sinnerPlays"
          :data-sinner-play-id="sinnerplay.id"
          class="sinner-play"
          onclick="sinnerPlayClick(this)"
        >
          <div v-for="card in sinnerplay.whiteCards" class="card white-card in-table">
            <p>${card.text}</p>
            <p class="card-expansion-text">${card.expansion}</p>
          </div>
        </div>
      </div>
    </div>
    <div id="players-item">
      <p>Room: {{.Game.Name}}</p>
      <ol>
        <li class="player-item floating" v-for="player in gamestate.players">
          ${player.name}
          <span v-if="player.id == gamestate.myPlayer.id"> (It's you!)</span>
          <div>
            <small v-if="player.id == gamestate.currentCzarID"><b>Czar</b></small>
            <small v-else-if="player.whiteCardsInPlay">Waiting</small>
            <small v-else>Playing</small>
          </div>
          <player-point
            v-for="point in player.points"
            v-bind:card="point"
          ></player-point>
        </li>
      </ol>
    </div>
    <div id="hand-item">
      <div v-for="(card, index) in gamestate.myPlayer.hand"
        :data-card-index="index"
        class="card white-card floating"
        onclick="whiteCardClick(this)"
      >
        <p>${card.text}</p>
        <p class="card-expansion-text">${card.expansion}</p>
      </div>
    </div>
  </div>
  <button class="confirm-button primary-button" onclick="onConfirm()">âœ“</button>
</div>
<div v-else>
  Loading...
</div>
</div>

{{end}}

{{define "script"}}
<script>
const MAX_RETRIES_ON_SOCKET_CLOSED = 4
const VUE_FLASH_STAY_MS = 5000

var app = new Vue({
  el: '.main',
  data: {
    gamestate: undefined,
    vueFlashes: [],
  },
  updated: randomRotateCards,
})

Vue.component("player-point", {
  props: ["card"],
  template: "<div class='player-point' :title='card.text'></div>"
})

function startWebsocket(retries) {
  const sock = new WebSocket(relativeWebSocketUrl("/api/game/{{.Game.ID}}/state/websocket"))

  sock.onmessage = (e) => {
    retries = MAX_RETRIES_ON_SOCKET_CLOSED
    app.vueFlashes = []

    // data type: gameStateResponse
    let gamestate = JSON.parse(e.data)
    console.log(gamestate)
    app.gamestate = gamestate
    app.tip = getPlayerTip(gamestate)
  }

  sock.onclose = () => {
    retries--
    if (retries <= 0) {
      app.vueFlashes.push("Could not reconnect to server.")
      return
    }
    console.error("Server Connection was lost, reconnecting...")
    setTimeout(() => startWebsocket(retries), 2000 / retries)
  }

  sock.onerror = (err) => {
    pushVueError("Server Connection error: " + err.message)
    sock.close()
  }
}

function getPlayerTip(state) {
  if (state.phase === "Czar is choosing winner") {
    return state.myPlayer.id === state.currentCzarID ? 
      "Choose the winner" : "The Czar is choosing the winner"
  }
  if (state.phase === "Sinners playing their cards") {
    if (state.myPlayer.id === state.currentCzarID) {
      return "Wait until all sinners play their cards"
    }
    let blanks = state.blackCardInPlay.blanks
    if (blanks === 1) {
      return "Play one card"
    }
    return `Play ${blanks} cards`
  }
  return ""
}

function whiteCardClick(card) {
  let cardIndex = card.dataset.cardIndex
  card.classList.toggle("selected")
  card.classList.toggle("glowing")
}

function sinnerPlayClick(elem) {
  let state = app.gamestate
  if (state.myPlayer.id !== state.currentCzarID) {
    return
  }
  let sinnerPlayId = Number(elem.dataset.sinnerPlayId)
  let data = {winner: sinnerPlayId}
  doPlayerAction("/api/game/{{.Game.ID}}/state/choose-winner", data)
}

function onConfirm() {
  let data = {cardIndexes: getSelectedCardIndexes()}
  doPlayerAction("/api/game/{{.Game.ID}}/state/play-cards", data)
}

function doPlayerAction(url, data) {
  let body = JSON.stringify(data)
  fetch(url, {
      method: "POST",
      body: body,
      headers:{
        "Content-Type": "application/json"
      },
  })
  .then(res => {
    if (!res.ok) {
      res.text().then(pushVueError)
      return
    }
    clearSelections()
  })
  .catch(pushVueError)
}

function pushVueError(error) {
  console.error(error)
  app.vueFlashes.push(error)
  setTimeout(() => app.vueFlashes.shift(), VUE_FLASH_STAY_MS)
}

function getSelectedCardIndexes() {
  return [...document.querySelectorAll(".selected")]
    .map(elem => Number(elem.dataset.cardIndex))
}

function clearSelections() {
  document.querySelectorAll(".selected").forEach(elem => {
    elem.classList.toggle("selected")
    elem.classList.toggle("glowing")
  })
}

startWebsocket(MAX_RETRIES_ON_SOCKET_CLOSED)
</script>
{{end}}

{{define "style"}}
<style>
.game-grid {
  padding: 1rem;
  display: grid;
  grid-template-columns: 80% auto;
}

#table-item {
  grid-column: 1 / span 1;
  grid-row: 1 / span 1;
  //border: 1px solid;
}

#players-item {
  grid-column: 2 / span 1;
  grid-row: 1 / span 3;
  //border: 1px solid;
}

#hand-item {
  grid-column: 1 / span 1;
  grid-row: 3 / span 1;
  display: flex;
  flex-wrap: wrap;
  background: var(--color-black);
  padding: 8px;
  border-radius: 6px;
  //border: 1px solid;
}

.card {
  margin: 8px;
  display: inline-block;
}

.player-item {
  margin: 8px;
  padding: 8px;
  color: var(--color-bg);
  background: var(--color-font);
  border-radius: 4px;
  text-align: left;
  min-width: 6rem;
}

.player-point {
  width: 1rem;
  height: 1.2rem;
  border-radius: 3px;
  background: var(--color-bg);
  display: inline-block;
  margin: 4px 4px 0 0;
}

#sinner-plays {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
}

.sinner-play {
  margin: 1.5rem;
}

.confirm-button {
  height: 6rem;
  width: 6rem;
  border-radius: 3rem;
  font-size: 3rem;
  margin: 1rem 16px 1rem auto;
  display: block;
  position: sticky;
  bottom: 16px;
}

@media (max-width: 749px) {
  #players-item {
    grid-row: 1 / span 1;
    grid-column: 1 / span 2;
    margin-bottom: 1rem;
    margin-left: 4rem;
    margin-right: 4rem;
  }
  #table-item {
    grid-row: 2 / span 1;
    grid-column: 1 / span 2;
  }
  #hand-item {
    grid-column: 1 / span 2;
    justify-content: space-evenly;
  }
}
</style>
{{end}}